"""
This type stub file was generated by pyright.
"""

"""
This module intends to provide an implementation of Extended Window Manager
Hints, based on the Xlib modules for python.

See the freedesktop.org `specification
<http://standards.freedesktop.org/wm-spec/wm-spec-latest.html>`_ for more
information.
"""

from typing import Tuple

class Window:
    def get_wm_class(self) -> Tuple[str, str]: ...

class EWMH:
    """
    This class provides the ability to get and set properties defined by the
    EWMH spec.

    Each property can be accessed in two ways. For example, to get the active
    window::

      win = ewmh.getActiveWindow()
      # or: win = ewmh.getProperty('_NET_ACTIVE_WINDOW')

    Similarly, to set the active window::

      ewmh.setActiveWindow(myWindow)
      # or: ewmh.setProperty('_NET_ACTIVE_WINDOW', myWindow)

    When a property is written, don't forget to really send the notification by
    flushing requests::

      ewmh.display.flush()

    :param _display: the display to use. If not given, Xlib.display.Display()
                     is used.
    :param root: the root window to use. If not given,
                     self.display.screen().root is used.
    """

    NET_WM_WINDOW_TYPES = ...
    NET_WM_ACTIONS = ...
    NET_WM_STATES = ...
    def __init__(self, _display=..., root=...) -> None: ...
    def setNumberOfDesktops(self, nb):  # -> None:
        """
        Set the number of desktops (property _NET_NUMBER_OF_DESKTOPS).

        :param nb: the number of desired desktops"""
        ...
    def setDesktopGeometry(self, w, h):  # -> None:
        """
        Set the desktop geometry (property _NET_DESKTOP_GEOMETRY)

        :param w: desktop width
        :param h: desktop height"""
        ...
    def setDesktopViewport(self, w, h):  # -> None:
        """
        Set the viewport size of the current desktop
        (property _NET_DESKTOP_VIEWPORT)

        :param w: desktop width
        :param h: desktop height"""
        ...
    def setCurrentDesktop(self, i):  # -> None:
        """
        Set the current desktop (property _NET_CURRENT_DESKTOP).

        :param i: the desired desktop number"""
        ...
    def setActiveWindow(self, win):  # -> None:
        """
        Set the given window active (property _NET_ACTIVE_WINDOW)

        :param win: the window object"""
        ...
    def setShowingDesktop(self, show):  # -> None:
        """
        Set/unset the mode Showing desktop (property _NET_SHOWING_DESKTOP)

        :param show: 1 to set the desktop mode, else 0"""
        ...
    def setCloseWindow(self, win):  # -> None:
        """
        Close the given window (property _NET_CLOSE_WINDOW)

        :param win: the window object"""
        ...
    def setWmName(self, win, name):  # -> None:
        """
        Set the property _NET_WM_NAME

        :param win: the window object
        :param name: desired name"""
        ...
    def setWmVisibleName(self, win, name):  # -> None:
        """
        Set the property _NET_WM_VISIBLE_NAME

        :param win: the window object
        :param name: desired visible name"""
        ...
    def setWmDesktop(self, win, i):  # -> None:
        """
        Move the window to the desired desktop by changing the property
        _NET_WM_DESKTOP.

        :param win: the window object
        :param i: desired desktop number
        """
        ...
    def setMoveResizeWindow(
        self, win, gravity=..., x=..., y=..., w=..., h=...
    ):  # -> None:
        """
        Set the property _NET_MOVERESIZE_WINDOW to move or resize the given
        window. Flags are automatically calculated if x, y, w or h are defined.

        :param win: the window object
        :param gravity: gravity (one of the Xlib.X.*Gravity constant or 0)
        :param x: int or None
        :param y: int or None
        :param w: int or None
        :param h: int or None
        """
        ...
    def setWmState(self, win, action, state, state2=...):  # -> None:
        """
        Set/unset one or two state(s) for the given window (property
        _NET_WM_STATE).

        :param win: the window object
        :param action: 0 to remove, 1 to add or 2 to toggle state(s)
        :param state: a state
        :type state: int or str (see :attr:`NET_WM_STATES`)
        :param state2: a state or 0
        :type state2: int or str (see :attr:`NET_WM_STATES`)
        """
        ...
    def getClientList(
        self,
    ):  # -> list[Unknown | Resource | Drawable | Window | Pixmap | Fontable | Font | GC | Colormap | Cursor | None]:
        """
        Get the list of windows maintained by the window manager for the
        property _NET_CLIENT_LIST.

        :return: list of Window objects
        """
        ...
    def getClientListStacking(
        self,
    ):  # -> list[Unknown | Resource | Drawable | Window | Pixmap | Fontable | Font | GC | Colormap | Cursor | None]:
        """
        Get the list of windows maintained by the window manager for the
        property _NET_CLIENT_LIST_STACKING.

        :return: list of Window objects"""
        ...
    def getNumberOfDesktops(self):
        """
        Get the number of desktops (property _NET_NUMBER_OF_DESKTOPS).

        :return: int"""
        ...
    def getDesktopGeometry(self):  # -> None:
        """
        Get the desktop geometry (property _NET_DESKTOP_GEOMETRY) as an array
        of two integers [width, height].

        :return: [int, int]"""
        ...
    def getDesktopViewPort(self):  # -> None:
        """
        Get the current viewports of each desktop as a list of [x, y]
        representing the top left corner (property _NET_DESKTOP_VIEWPORT).

        :return: list of [int, int]
        """
        ...
    def getCurrentDesktop(self) -> int: ...
    def getActiveWindow(
        self,
    ) -> Window | None: ...
    def getWorkArea(self):  # -> None:
        """
        Get the work area for each desktop (property _NET_WORKAREA) as a list
        of [x, y, width, height]

        :return: a list of [int, int, int, int]
        """
        ...
    def getShowingDesktop(self):
        """
        Get the value of "showing the desktop" mode of the window manager
        (property _NET_SHOWING_DESKTOP).  1 means the mode is activated, and 0
        means deactivated.

        :return: int
        """
        ...
    def getWmName(self, win):  # -> None:
        """
        Get the property _NET_WM_NAME for the given window as a string.

        :param win: the window object
        :return: str
        """
        ...
    def getWmVisibleName(self, win):  # -> None:
        """
        Get the property _NET_WM_VISIBLE_NAME for the given window as a string.

        :param win: the window object
        :return: str
        """
        ...
    def getWmDesktop(self, win):
        """
        Get the current desktop number of the given window (property
        _NET_WM_DESKTOP).

        :param win: the window object
        :return: int
        """
        ...
    def getWmWindowType(self, win, str=...):  # -> list[Unknown | str]:
        """
        Get the list of window types of the given window (property
        _NET_WM_WINDOW_TYPE).

        :param win: the window object
        :param str: True to get a list of string types instead of int
        :return: list of (int|str)
        """
        ...
    def getWmState(self, win, str=...):  # -> list[Unknown | str]:
        """
        Get the list of states of the given window (property _NET_WM_STATE).

        :param win: the window object
        :param str: True to get a list of string states instead of int
        :return: list of (int|str)
        """
        ...
    def getWmAllowedActions(self, win, str=...):  # -> list[Unknown | str]:
        """
        Get the list of allowed actions for the given window (property
        _NET_WM_ALLOWED_ACTIONS).

        :param win: the window object
        :param str: True to get a list of string allowed actions instead of int
        :return: list of (int|str)
        """
        ...
    def getWmPid(self, win):
        """
        Get the pid of the application associated to the given window (property
        _NET_WM_PID)

        :param win: the window object
        """
        ...
    def getReadableProperties(
        self,
    ):  # -> dict_keys[str, (() -> list[Unknown | Resource | Drawable | Window | Pixmap | Fontable | Font | GC | Colormap | Cursor | None]) | (() -> Unknown) | (() -> (Unknown | None)) | (() -> (Unknown | Resource | Drawable | Window | Pixmap | Fontable | Font | GC | Colormap | Cursor | None)) | ((win: Unknown) -> (Unknown | None)) | ((win: Unknown) -> Unknown) | ((win: Unknown, str: bool = False) -> (Unknown | list[Unknown | str]))]:
        """
        Get all the readable properties' names
        """
        ...
    def getProperty(self, prop, *args, **kwargs):  # -> list[Unknown | str] | None:
        """
        Get the value of a property. See the corresponding method for the
        required arguments.  For example, for the property _NET_WM_STATE, look
        for :meth:`getWmState`
        """
        ...
    def getWritableProperties(
        self,
    ):  # -> dict_keys[str, ((nb: Unknown) -> None) | ((w: Unknown, h: Unknown) -> None) | ((i: Unknown) -> None) | ((win: Unknown) -> None) | ((show: Unknown) -> None) | ((win: Unknown, gravity: int = 0, x: Unknown | None = None, y: Unknown | None = None, w: Unknown | None = None, h: Unknown | None = None) -> None) | ((win: Unknown, name: Unknown) -> None) | ((win: Unknown, i: Unknown) -> None) | ((win: Unknown, action: Unknown, state: Unknown, state2: int = 0) -> None)]:
        """Get all the writable properties names"""
        ...
    def setProperty(self, prop, *args, **kwargs):  # -> None:
        """
        Set the value of a property by sending an event on the root window.
        See the corresponding method for the required arguments. For example,
        for the property _NET_WM_STATE, look for :meth:`setWmState`
        """
        ...
